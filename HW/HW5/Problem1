For each of the following recurrences, verify the answer you get by applying the master method, by solving the recurrence algebraically OR applying the recursion tree method. 

1 T(N) = 2T(N-1) + 1
2 T(N) = 3T(N-1) + n
3 T(N) = 9T(N/2) + n^2
4 T(N) = 100T(N/2) + n^(log2(cn) + 1)  (c is a constant)
5 T(N) = 4T(N/2) + n^2 * logn
6 T(N) = 5T(N/2) + n^2 / logn

1. T(N) = 2T(N-1) + 1
T(N-1) = 2T(N-2) + 1
T(N-2) = 2T(N-3) + 1

T(N) = 2(2T(N-2) + 1) + 1 = 4T(N-2) + 2
T(N) = 4(2T(N-3) + 1) + 2 = 8T(N-3) + 3
T(N) = (2^k)T(N-k) + k

Let N-k = 0
∴ N = k
∴ T(N) = (2^N)T(0) + N
∴ T(N) = 2^N + N
Θ(N^2)

2. T(N) = 3T(N-1) + n
Apply Master Method
T(N) = aT(N-b)+f(n)
where a,b > 0, f(n) = O(N^k) and k>0, if a>1 then T(n) = O(n^k * a^n/b)
O(n*3^n)

3. T(N) = 9T(N/2) + n^2
Apply Master Method
T(N) = aT(N/b)+f(n)
where a >=1,b > 1, And f(n) = O(n^(logb(a)-e)) where e>0 then T(n) = Θ(n^(logb(a)))
f(n) = O(n^2)
f(n) = O(n^(log2(9)-e)) = O(n^(3.169 - 1.169)) = O(n^2) | 1.169 > 0
T(n) = Θ(n^log2(9))

4. T(N) = 100T(N/2) + n^(log2(cn) + 1)  (c is a constant)



