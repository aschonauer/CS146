For each of the following recurrences, verify the answer you get by applying the master method, by solving the recurrence algebraically OR applying the recursion tree method. 

1 T(N) = 2T(N-1) + 1
2 T(N) = 3T(N-1) + n
3 T(N) = 9T(N/2) + n^2
4 T(N) = 100T(N/2) + n^(log2(cn) + 1)  (c is a constant)
5 T(N) = 4T(N/2) + n^2 * logn
6 T(N) = 5T(N/2) + n^2 / logn

1. T(N) = 2T(N-1) + 1
T(N-1) = 2T(N-2) + 1
T(N-2) = 2T(N-3) + 1

T(N) = 2(2T(N-2) + 1) + 1 = 4T(N-2) + 3
T(N) = 4(2T(N-3) + 1) + 3 = 8T(N-3) + 7
T(N) = (2^k)T(N-k) + 2^k - 1

Let N-k = 0
∴ N = k
∴ T(N) = (2^N)T(0) + 2^N - 1
∴ T(N) = 2^N + 2^N - 1
Θ(2^N)

Apply Master Method
T(N) = aT(N-b)+f(n)
where a,b > 0, f(n) = O(N^k) and k>=0, if a>1 then T(n) = O(n^k * a^n/b)
T(n) = O(n^0 * 2^(n/1))
T(N) = O(2^N) Same as algebraic method!


2. T(N) = 3T(N-1) + n
T(N-1) = 3T(N-2) + n - 1
T(N-2) = 3T(N-3) + n - 2

T(N) = 3(3T(N-2) + n - 1) + n = 9T(N-2) + 3(n-1) + n
T(N) = 9(3T(N-3) + n - 2) + 3(n-1) + n = 27T(N-3) + 9(n-2) + 3(n-1) + n
T(N) = 3^k*T(N-k) + 3^(k-1)(n-k+1) + 3^(k-2)(n-k+2) + ... + 3(n-1) + n

Let N-k = 0
∴ N = k
∴ T(N) = 3^N * T(0) + 3^(n-1)(n-n+1) + 3^(n-2)(n-n+2) + ... + 3(n-1) + n
∴ T(N) = 3^N + 3^(n-1) + 3^(n-2)*2 + ... + 3(n-1) + n
O(3^N * N)

Apply Master Method
T(N) = aT(N-b)+f(n)
where a,b > 0, f(n) = O(N^k) and k>0, if a>1 then T(n) = O(n^k * a^n/b)
O(n*3^n) Same as algebraic method!


3. T(N) = 9T(N/2) + n^2
T(N/2) = 9T(N/4) + (n/2)^2
T(N/4) = 9T(N/8) + (n/4)^2

T(N) = 9(9T(N/4) + (n/2)^2) + n^2 = 81T(N/4) + 9(n/2)^2 + n^2
T(N) = 81(9T(N/8) + (n/4)^2) + 10n^2 = 729T(N/8) + 81(n/4)^2 + 9(n/2)^2 + n^2
T(N) = 9^k * T(N/(2^k)) + 9^(k-1)(n/2^(k-1))^2 + 9^(k-2)(n/2^(k-2))^2 + ... + 9(n/2)^2 + n^2

let N/(2^k) = 1
∴ N = 2^k
∴ k = log2(N)
∴ T(N) = 9^log2(N) * T(1) + 9^(log2(N)-1)(N/2^(log2(N)-1))^2 + ... + 9(N/2)^2 + N^2
N^2 is less than 9^log2(N)
∴ T(N) = Θ(9^log2(N)) = Θ(N^log2(9))

Apply Master Method
T(N) = aT(N/b)+f(n)
f(n) = O(n^2)
where a >=1,b > 1, And f(n) = O(n^logb(a)-e) where e>0 then T(n) = Θ(n^logb(a))
Θ(n^log2(9)) same as algebraic!

4. T(N) = 100T(N/2) + n^(log2(cn) + 1)  (c is a constant)
T(N/2) = 100T(N/4) + (n/2)^(log2(c(n/2)) + 1)
T(N/4) = 100T(N/8) + (n/4)^(log2(c(n/4)) + 1)

T(N) = 100(100T(N/4) + (n/2)^(log2(c(n/2) + 1))) + n^(log2(cn) + 1) 
        = 10000T(N/4) + 100((n/2)^(log2(c(n/2)) + 1)) + n^(log2(cn) + 1)

T(N) = 10000(100T(N/8) + (n/4)^(log2(c(n/4)) + 1)) + 100((n/4)^(log2(c(n/4)) + 1)) + n^(log2(cn) + 1)
        = 1000000T(N/8) + 10000((n/4)^(log2(c(n/4)) + 1)) + 100((n/2)^(log2(c(n/2)) + 1)) + n^(log2(cn) + 1)

T(N) = 100^k(T(N/2^k)) + 100^(k/4)(k/4)^(log2(c(k/4))+1) + 100^(k/2)(k/2)^(log2(c(k/2))+1)
          + ... + 100((n/2)^(log2(c(n/2)) + 1)) + n^(log2(cn) + 1)

Let N/2^k = 1
k = log2(N)
T(N) = 100^log2(N)(T(1)) + 100^(log2(N)/2)*(n-log2(N)+1)^(log2(c(n-log2(N)+1))+1)
      + 100^(log2(N)/4)*(n-log2(N)+2)^(log2(c(n-log2(N)+2))+1) 
      +...+ 100(n/2)^log2(c(N-1))+1 + N^log2(Nc)+1
T(N) = Θ(N^log2(100))

Apply Master Method
where a >=1,b > 1, And f(n) = Θ(n^logb(a)-e) where e>0 then T(n) = Θ(n^logb(a))
Θ(n^log2(100)) same as algebraic

5. T(N) = 4T(N/2) + n^2 * logn
T(N/2) = 4T(N/4) + (n/2)^2 * log(n/2)
T(N/4) = 4T(N/8) + (n/4)^2 * log(n/4)

T(N) = 4(4T(N/4) + (n/2)^2 * log(n/2)) + n^2 * logn = 16T(N/4) + 4(n/2)^2*log(n/2)) + n^2*logn
T(N) = 16(4T(N/8) + (n/4)^2 * log(n/4)) + 4(n/2)^2*log(n/2)) + n^2*logn
      = 64T(N/8) + 16(n/4)^2*log(n/4)) + 4(n/2)^2*log(n/2)) + n^2*logn
T(N) = (4^k)T(N/2^k) + 2^(k-1)(n/2^k-2)^log(n/2^k-2) + 2^(k-2)(n/2^k-3)^log(n/2^k-3)
        + ... + 4(n/2)^2*log(n/2)) + n^2*logn

Let N/2^k = 1
k = log2(N)
T(N) = 4^log2(N) + 2^(log2(N)-1)(4)*log(4)) + 2^(log2(N)-2)(8)*log(8) +...+ 4(n/2)^2*log(n/2)) + n^2*logn
T(N) = Θ(N^log2(4) * log(n))

Apply Master Method
f(n) = Θ(n^logb(a)-e * log^k(n)) where k>=0 then T(n) = Θ(n^logb(a) * log^k+1(n)
T(n) = Θ(n^log2(4) * log(n)) same as algebraic


6. T(N) = 5T(N/2) + n^2 / logn
T(N/2) = 5T(N/4) + (n/2)^2 / log(n/2)
T(N/4) = 5T(N/8) + (n/4)^2 / log(n/4)

T(N) = 5(5T(N/4) + (n/2)^2 / log(n/2)) + n^2 / logn = 25T(N/4) + 5(n/2)^2/log(n/2)) + n^2/logn
T(N) = 25(5T(N/8) + (n/4)^2 / log(n/4)) + 5(n/2)^2/log(n/2)) + n^2/logn
      = 125T(N/8) + 25(n/4)^2/log(n/4)) + 5(n/2)^2/log(n/2)) + n^2/logn
T(N) = (5^k)T(N/2^k) + 5^(k-1)(n/2^k-2)^2/log(n/2^k-2) + 5^(k-2)(n/2^k-3)^2/log(n/2^k-3)
        + ... + 5(n/2)^2/log(n/2)) + n^2/logn

Let N/2^k = 1
k = log2(N)
T(N) = 5^log2(N) + 5^(log2(N)-1)(4)/log(4) + 5^(log2(N)-2)(8)/log(8) +...+ 5(n/2)^2*log(n/2)) + n^2*logn
T(N) = Θ(N^log2(5) * log^-1(n))

Apply Master Method
f(n) = Θ(n^logb(a)-e * log^k(n)) where k>=0 then T(n) = Θ(n^logb(a) * log^k+1(n)
T(n) = Θ(n^log2(5) * log^-1(n)) same as algebraic


