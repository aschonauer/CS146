Matrix Multiplication uses the for loops below:

for(int i = 0; i < rows_A; i++) {       //N+1(c1)
  for(int j = 0; j < cols_B; j++) {     //N(N+1)(c2)
    something...                        //N(N)(c3)
    for(int k = 0; k < cols_A; k++) {   //N(N)(N+1)(c4)
      something...                      //N(N)(N)(c5)
    }
  }
}

N^3(c4+c5) + N^2(c2+c3+c4) + N(c1+c2) + c1, N^3 growth

The best, worst, and average cases, no matter what will have to loop through every element in
the two matrices, looping through B multiple times since each row of A must be multiplied with 
each column of B no matter what. 

f(n) = N^3(c4+c5) + N^2(c2+c3+c4) + N(c1+c2) + c1
n0 = 1
O(): N^3(c4+c5) + N^2(c2+c3+c4) + N(c1+c2) + c1 ≤ N^3(c4+c5) + N^3(c2+c3+c4) + N^3(c1+c2) + N^3(c1) -> f(n) = O(N^3)
Ω(): N^3 ≤ N^3(c4+c5) + N^2(c2+c3+c4) + N(c1+c2) + c1 -> f(n) = Ω(N^3)
Because O(N^3) and Ω(N^3), that means Θ(N^3)
